1..the first approach is traverse through linked list and store all the values in list data structure
   then apply palindrome logic on list---O(n+n/2)--O(n)---space---O(n)


2..this can be solved by two pointers approach but the problem we cant traverse back(because of SLL) that why

   we will   find the mid element---O(n/2+n/2+n/2)--O(n)--space--O(1)
    and we will  reverse the right part of mid element
    and then now we will apply two pointers logic
       

          middle element logic
-----------------------------
        slow,fast=head,head
        while fast and fast.next:
            slow=slow.next
            fast=fast.next.next

        reverse the right part of the middle element
-----------------------------------------
        prev=None
        temp=slow
        while slow:
            slow=slow.next
            temp.next=prev
            prev=temp
            temp=slow
        
       apply two pointers logic
---------------------------------------------
        l,r=head,prev
        while r:
            if l.val!=r.val:
                return False
            l=l.next
            r=r.next
        return True

