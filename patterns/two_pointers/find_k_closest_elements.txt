1..this problem can be solved by using heap
 
   heapify method---O(n+nlogk+klogn+klogk)----space--O(n+k)
          (or)
     (largest element--use min heap-----time--O(nlogk+klogn+klogk)--space--O(k+k)
     smallest element--use max heap
       and we will restrict the size of heap  to k so that 
        insert--O(logk) and delete--O(logk)
        and the size of heap will be--O(k))


2..the second approach is using two pointers---O(n)--space--O(k)

        i,j=0,len(arr)-1
        res=[]
        while (j-i+1)>k:
            if abs(arr[i]-x)>abs(arr[j]-x):
                i+=1
            else:
                j-=1
        while i<=j:
            res.append(arr[i])
            i+=1

3...third approach is by using binary search pattern--O(logn)--(undone)

   