1...take two loops i(0---n-1) and j(i+1---n-1) and update profit variable based on some logic ---o(n2)
2....this can be solved by sliding window pattern--O(n)
      

      here the logic is when prices[l]>prices[r] then we can say we 
      dont get any profit so shift l=r and r+=1 

      if above condition fails then calculate max profit


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        profit=0
        for i in range(len(prices)-1):
            for j in range(i+1,len(prices)):
                sub=prices[j]-prices[i]
                if sub>profit:
                    profit=sub
        return profit



class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        profit=0
        l,r=0,1
        while r<len(prices):
            if prices[l]>prices[r]:
                l=r
                r+=1
            else:
                sub=prices[r]-prices[l]
                if sub>profit:
                    profit=sub
                r+=1
            
        return profit
        