1..This can be solved by sliding window  pattern----O(n)----O(1)


   valid window-->no of replacements{(r-l+1)-max(count.values())} is <=k
   invalid window-->no of replacements{(r-l+1)-max(count.values())} is >k
   take res,l,r, count(dictionary)variables 
   
   if valid window 
     update res
     r++
  else
     update count  -1
      l+=1



class Solution:
    def characterReplacement(self, s: str, k: int) -> int:
        l,r=0,0
        d={}
        long=0
        while r<len(s):
            d[s[r]]=d.get(s[r],0)+1
            while (r-l+1)-max(d.values())>k:
                d[s[l]]=d[s[l]]-1
                l+=1
            long=max(long,r-l+1)
            r+=1
        return long
     
    
     
   
   
